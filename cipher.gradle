import org.apache.tools.ant.taskdefs.condition.Os

task assembleExternalJar << {
    // Get the location of the Android SDK
    ext.androidSdkDir = System.env.ANDROID_HOME
    if (androidSdkDir == null) {
        Properties localProps = new Properties()
        localProps.load(new FileInputStream(file('../local.properties')))
        ext.androidSdkDir = localProps['sdk.dir']
    }
    exec {
	commandLine "rm",
		"-rf",
		"${buildDir}/intermediates/classes/release/com/android/vending/billing"
    }
    // Make sure no existing jar file exists as this will cause dx to fail
    new File("${buildDir}/intermediates/dex/${PLUGIN_NAMESPACE}.dex").delete();
    // Use command line dx utility to convert *.class files into classes.dex inside jar archive
    String cmdExt = Os.isFamily(Os.FAMILY_WINDOWS) ? '.bat' : ''
    def params = []
    params << "${androidSdkDir}/build-tools/${BUILD_TOOLS_VERSION}/dx${cmdExt}"
    params << "--dex"
    params << "--output=${buildDir}/intermediates/classes/${PLUGIN_NAMESPACE}.dex"
    params << "${buildDir}/intermediates/classes/release/"
    "${CIPHER_LIBRARY}".split(",").each {
        def library ->
            params << library
    }
    println params
    exec {
        commandLine params
    }
    //    copyJarToOutputs.execute()
    def passwd = "base64 passwd".execute().text
    println "Base64: ${passwd}"
    exec {
        commandLine "java",
        "-cp",
        "../../GooglePlayCipher/GooglePlayCipherLibrary/build/intermediates/classes/release/",
        "jp.cane.android.googleplaycipher.CipherUtil",
        "${buildDir}/intermediates/classes/${PLUGIN_NAMESPACE}.dex",
        "${passwd}",
        "../${START_MODULE}/src/main/assets/a.out"
    }
}
 
// Define some tasks which are used in the build process
task copyClasses(type: Copy) {
    // Copy the assembled *.class files for only the current namespace into a new directory
    // get directory for current namespace (PLUGIN_NAMESPACE = 'com.example.toastlib')
    def namespacePath = PLUGIN_NAMESPACE.replaceAll("\\.", "/")
    // set source and destination directories
    from "build/intermediates/classes/release/${namespacePath}/"
    into "build/intermediates/dex/${namespacePath}/"
 
    // exclude classes which don't have a corresponding .java entry in the source directory
    def remExt = { name -> name.lastIndexOf('.').with { it != -1 ? name[0..<it] : name } }
    eachFile { details ->
        def thisFile = new File("${projectDir}/src/main/java/${namespacePath}/", remExt(details.name) + ".java")
        if (!(thisFile.exists())) {
            details.exclude()
        }
    }
}
 
// Set the dependencies of the build tasks so that assembleExternalJar does a complete build
copyClasses.dependsOn(assemble)
assembleExternalJar.dependsOn(copyClasses)
